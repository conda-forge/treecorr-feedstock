--- setup.py
+++ setup.py
@@ -52,7 +52,7 @@
     'clang w/ OpenMP' : ['-fopenmp','-O3','-ffast-math', '-stdlib=libc++'],
     'clang w/ Intel OpenMP' : ['-Xpreprocessor','-fopenmp','-O3','-ffast-math', '-stdlib=libc++'],
     'clang w/ manual OpenMP' : ['-Xpreprocessor','-fopenmp','-O3','-ffast-math', '-stdlib=libc++'],
-    'unknown' : [],
+    'unknown' : ['-fopenmp','-O3','-ffast-math'],
 }
 lopt =  {
     'gcc' : ['-fopenmp'],
@@ -61,7 +61,7 @@
     'clang w/ OpenMP' : ['-fopenmp', '-stdlib=libc++'],
     'clang w/ Intel OpenMP' : ['-liomp5', '-stdlib=libc++'],
     'clang w/ manual OpenMP' : ['-lomp', '-stdlib=libc++'],
-    'unknown' : [],
+    'unknown' : ['-fopenmp'],
 }
 
 undef_macros = []
@@ -483,9 +483,9 @@
     check_ffi(cc, comp_type)
 
     # Check if we can use ccache to speed up repeated compilation.
-    if not already_have_ccache and try_cpp(compiler, prepend='ccache'):
-        print('Using ccache')
-        compiler.set_executable('compiler_so', ['ccache'] + compiler.compiler_so)
+    # if not already_have_ccache and try_cpp(compiler, prepend='ccache'):
+    #     print('Using ccache')
+    #     compiler.set_executable('compiler_so', ['ccache'] + compiler.compiler_so)
 
     extra_cflags = copt[comp_type]
     extra_lflags = lopt[comp_type]
